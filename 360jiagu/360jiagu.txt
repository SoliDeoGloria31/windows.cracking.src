adb shell /data/data/sv
adb forward tcp:23946 tcp:23946
adb shell am start -D -n com.easyread.ebook.s/com.freenovel.activity.SplashActivity
adb shell am start -D -n com.snow.alldalvikopcode/.MainActivity
jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700


open /proc/self/maps
strstr /system/bin/linker
open /system/bin/linker
mmap /system/bin/linker
find rtld_db_dlactivity address

//open
auto f;
f = GetString(r0,-1,GetStringType(r0));
print("open: " + f);
if(f == "/system/bin/linker")
{
    if(lr==0x4A3BAE78)
    {
        print("fix rtld_db_dlactivity");
       // PatchWord(0x40005AC4, 0xC046);
        PatchWord(0x40005AC4, 0xBF00);
    }
}
else if (f == "/proc/self/status")
{
    print("enabled strtol breakpoint");
    EnableBpt(0x4004801A,1);
}
else if(f == "/proc/net/tcp")
{
     print("enabled strstr breakpoint");
     EnableBpt(0x40048CF4,1);
}
else if(-1!=strstr(f, "/proc/") && -1==strstr(f, "/self/") && -1!=strstr(f, "/maps"))
{
    print("pre find odex");
    //EnableBpt(0x4003CF1C,1); //malloc
    PauseProcess();
}




4A50D57C  JNI_Onload
40005AC4
4A50C3C4  time
4A50CD10

08248+4A3B9000=4A3C1248
libjiagu.so 4A3B9000 4A3C6000 R . X D . byte 00 public CODE 32 00 00

debug091 4A989000-4A989000+26E430=4ABF7430
auto i,fp;
fp = fopen("e:\\debug091.sec", "wb");
for(i=0x4A989000;i<0x4A989000+0x26E430;i++)
  fputc(Byte(i), fp);

4AA89000
4AB89000
4003F8EC
4003F8EC

settings put system screen_off_timeout 2400000

/system/bin/linker rtld_db_dlactivity  将DE 10修改为nop指令 C0 46
/proc/self/status  strtol(); r0 -> 0
/proc/net/tcp


static main() {
    print("main called");
    
    auto addr,name;
    addr=0;
    for(addr=NextFunction(addr);addr!=BADADDR;addr=NextFunction(addr)) {
        name = Name(addr);
        print(name);
    }
    
    print("main done");
}


auto seg;
seg=FirstSeg();
while(seg!=BADADDR)
{
    auto start = SegStart(seg);
    print(SegName(seg) + " : " + ltoa(start, 16));
    if(start==0x4A989000 || start==0x4AA89000 || start==0x4AB89000)
    {
        print("found dex");
        PauseProcess();
        break;
    }
    seg=NextSeg(seg);
}

//JNI_Onload
EnableBpt(0x4003F908,1); //open

//open
auto f;
f = GetString(r0,-1,GetStringType(r0));
print("open: " + f);
if(f == "/system/bin/linker")
{
    if(lr==0x4A507308)
    {
        print("fix rtld_db_dlactivity");
        PatchWord(0x40005AC4, 0xC046);
    }
}
else if (f == "/proc/self/status")
{
    print("enabled strtol breakpoint");
    EnableBpt(0x4004801A,1);
}
else if(f == "/proc/net/tcp")
{
     print("enabled strstr breakpoint");
     EnableBpt(0x40048CF4,1);
}
else if(-1!=strstr(f, "/proc/") && -1==strstr(f, "/self/") && -1!=strstr(f, "/maps"))
{
    print("pre find odex");
    //EnableBpt(0x4003CF1C,1); //malloc
    PauseProcess();
}

//strtol done
auto f;
print("strtol.done: " + ltoa(r0, 10));
if(pc==0x4004801A)
{
    print("fix /proc/self/status");
    SetRegValue(0, "r0");
    print("fix: " + ltoa(r0, 10));
    EnableBpt(pc,0);
}


//strstr
auto f;
f = GetString(r1,-1,GetStringType(r1));
print("strstr: " + f);
if(f == "00000000:5D8A")
{
     print("fix /proc/net/tcp");
     PatchByte(r1+0xc, 0x42);
     EnableBpt(pc,0);
     EnableBpt(0x40040890,1); //time done
}

auto f;
f = GetString(r1,-1,GetStringType(r1));
if(-1!=strstr(f, ".dex") || -1!=strstr(f, ".odex"))
{
    auto ff;
    ff = GetString(r0,-1,GetStringType(r0));
    if(-1!=strstr(ff,f))
    {    
        print("strstr: " + ff);
        PauseProcess();
    }
}
else
{
     EnableBpt(pc,0);
}

//open
EnableBpt(0x40048CF4,1);

//time done
print("fix time");
SetRegValue(0x59951019, "r0");
EnableBpt(pc,0);


//malloc
if(r0==0x2E2)
{
    print("malloc 2E2 buff");
    EnableBpt(0x40032A68,1); //__mmap2
    EnableBpt(pc,0);
}

//__mmap2
print("mmap: " + ltoa(r0, 16));




//mmap done
print(ltoa(Byte(r0),16)+ltoa(Byte(r0+1),16)+ltoa(Byte(r0+2),16));
if(Byte(r0)==0x64 && Byte(r0+1)==0x65 && Byte(r0+2)==0x78)
{
    print("mmap dex to pause process.");
    PauseProcess();
}

//mmap
print("mmap:"+ltoa(r0,16));
if(r0==0x4AB89000 || r0==0x4AA89000)
{
    PauseProcess();
}


//write
if(Byte(r1)==0x64 && Byte(r1+1)==0x65 && Byte(r1+2)==0x78)
{
    print("write dex.");
    PauseProcess();
}


==dex
if(Byte(r1)==0x64 && Byte(r1+1)==0x65 && Byte(r1+2)==0x78)
{
    print("write dex to pause process.");
    PauseProcess();
}

//memcmp dey
if(Byte(r1)==0x64 && Byte(r1+1)==0x65 && Byte(r1+2)==0x79)
{
    print("memcmp dey to pause process.");
    PauseProcess();
}

if(r0==0x4A989000)
{
    print("malloc dex buff.");
    PauseProcess();
}

48BDE000

/dev/ashmem/dalvik-classes.dex
apk@classes.dex
.odex

debug084:4A677A4E ; ---------------------------------------------------------------------------
debug084:4A677A4E CODE16
debug084:4A677A4E
debug084:4A677A4E loc_4A677A4E                            ; CODE XREF: debug084:4A677AA0j
debug084:4A677A4E                                         ; debug084:4A677AACj ...
debug084:4A677A4E MOVS            R1, #0x2D
debug084:4A677A50 MOVS            R0, R4
debug084:4A677A52 BL              unk_4A6BBA5C    ;strchr
debug084:4A677A56 MOVS            R1, #0x20
debug084:4A677A58 MOVS            R5, R0
debug084:4A677A5A MOVS            R0, R4
debug084:4A677A5C BL              unk_4A6BBA5C    ;strchr
debug084:4A677A60 STRB            R7, [R5]
debug084:4A677A62 MOVS            R1, #0
debug084:4A677A64 STRB            R7, [R0]
debug084:4A677A66 MOVS            R2, #0x10
debug084:4A677A68 MOVS            R0, R4
debug084:4A677A6A BL              unk_4A6BB91C    ;strtoul
debug084:4A677A6E MOVS            R1, #0
debug084:4A677A70 MOVS            R6, R0
debug084:4A677A72 MOVS            R2, #0x10
debug084:4A677A74 ADDS            R0, R5, #1
debug084:4A677A76 BL              unk_4A6BB91C    ;strtoul
debug084:4A677A7A LDR             R2, [SP]
debug084:4A677A7C SUBS            R1, R0, R6
debug084:4A677A7E MOVS            R0, R6
debug084:4A677A80 BLX             R9              ;memcmp(start, "dey")
debug084:4A677A82 CMP             R0, #0
debug084:4A677A84 BNE             loc_4A677AE8
debug084:4A677A86
debug084:4A677A86 loc_4A677A86                            ; CODE XREF: debug084:4A677A4Cj
debug084:4A677A86                                         ; debug084:4A677ABCj
debug084:4A677A86 MOVS            R1, #0x80
debug084:4A677A88 MOVS            R0, R4
debug084:4A677A8A LSLS            R1, R1, #3
debug084:4A677A8C MOV             R2, R8
debug084:4A677A8E BL              unk_4A6BBA6C
debug084:4A677A92 CMP             R0, #0
debug084:4A677A94 BEQ             loc_4A677ABE
debug084:4A677A96 MOVS            R0, R4
debug084:4A677A98 MOV             R1, R10
debug084:4A677A9A BL              strstr                  ; /dev/ashmem/dalvik-classes.dex
debug084:4A677A9E CMP             R0, #0
debug084:4A677AA0 BNE             loc_4A677A4E
debug084:4A677AA2 MOVS            R0, R4
debug084:4A677AA4 LDR             R1, [SP,#4]
debug084:4A677AA6 BL              strstr                  ; apk@classes.dex
debug084:4A677AAA CMP             R0, #0
debug084:4A677AAC BNE             loc_4A677A4E
debug084:4A677AAE LDR             R1, =(a_odex - 0x4A677AB6)
debug084:4A677AB0 MOVS            R0, R4
debug084:4A677AB2 ADD             R1, PC                  ; ".odex"
debug084:4A677AB4 BL              strstr                  ; .odex
debug084:4A677AB8 CMP             R0, #0
debug084:4A677ABA BNE             loc_4A677A4E
debug084:4A677ABC B               loc_4A677A86


//odex.offset = dex offset
debug087:4A7A7608 loc_4A7A7608                            ; CODE XREF: debug087:4A7A75E0j
debug087:4A7A7608 STR             R5, [R4,#0xC]
debug087:4A7A760A LDR             R3, [R5,#8]
debug087:4A7A760C MOV             R12, R3
debug087:4A7A760E ADD             R5, R12
debug087:4A7A7610 STR             R5, [R4]
debug087:4A7A7612 STR             R5, [R4,#0x10]
debug087:4A7A7614 B               loc_4A7A75E6

//qh 4A42FB1C
A7A61A8 ; ---------------------------------------------------------------------------
debug087:4A7A61A8
debug087:4A7A61A8 loc_4A7A61A8                            ; CODE XREF: debug087:4A772900p
debug087:4A7A61A8 PUSH            {R3-R7,LR}
debug087:4A7A61AA LDR             R5, [R0,#0x10]
debug087:4A7A61AC MOVS            R7, #0
debug087:4A7A61AE LDR             R2, [R5,#0x6C]
debug087:4A7A61B0 LDR             R3, [R5,#0x68]
debug087:4A7A61B2 MOV             R12, R2
debug087:4A7A61B4 LDR             R2, [R5,#0x20]
debug087:4A7A61B6 ADD             R3, R12
debug087:4A7A61B8 CMP             R3, R2
debug087:4A7A61BA BCS             loc_4A7A61DC
debug087:4A7A61BC LDR             R1, =(unk_4A7CA158 - 0x4A7A61C6)
debug087:4A7A61BE ADDS            R4, R5, R3
debug087:4A7A61C0 MOVS            R6, R0
debug087:4A7A61C2 ADD             R1, PC ; unk_4A7CA158
debug087:4A7A61C4 MOVS            R0, R4
debug087:4A7A61C6 MOVS            R2, #4
debug087:4A7A61C8 BL              j_j_memcmp_0
debug087:4A7A61CC CMP             R0, #0
debug087:4A7A61CE BNE             loc_4A7A61DC
debug087:4A7A61D0 MOVS            R7, #1
debug087:4A7A61D2 STR             R4, [R6,#4]
debug087:4A7A61D4 LDR             R3, [R5,#0x20]
debug087:4A7A61D6 ADDS            R3, R5, R3
debug087:4A7A61D8 SUBS            R3, R3, R4
debug087:4A7A61DA STR             R3, [R6,#8]
debug087:4A7A61DC
debug087:4A7A61DC loc_4A7A61DC                            ; CODE XREF: debug087:4A7A61BAj
debug087:4A7A61DC                                         ; debug087:4A7A61CEj
debug087:4A7A61DC MOVS            R0, R7
debug087:4A7A61DE POP             {R3-R7,PC}

//parse qh
debug075:4A88F980 ; ---------------------------------------------------------------------------
debug075:4A88F980 PUSH            {R4-R7,LR}
debug075:4A88F982 MOVS            R5, R2
debug075:4A88F984 LDR             R4, =(aLjMj - 0x4A88F98E)
debug075:4A88F986 SUB             SP, SP, #0x3C
debug075:4A88F988 MOVS            R6, R1
debug075:4A88F98A ADD             R4, PC                  ; "Lj\a@@藢J"
debug075:4A88F98C LDR             R4, [R4]                ; "Lj\a@@藢J"
debug075:4A88F98E MOVS            R7, R0
debug075:4A88F990 LDR             R3, [R4]
debug075:4A88F992 STR             R3, [SP,#0x34]
debug075:4A88F994 BL              loc_4A88F6F4
debug075:4A88F998 MOVS            R0, R5
debug075:4A88F99A BL              j_j_j_malloc
debug075:4A88F99E MOVS            R1, #0
debug075:4A88F9A0 MOVS            R2, R5
debug075:4A88F9A2 STR             R0, [SP,#4]
debug075:4A88F9A4 BL              j_j_memset_0
debug075:4A88F9A8 MOVS            R1, R6
debug075:4A88F9AA MOVS            R2, R5
debug075:4A88F9AC LDR             R0, [SP,#4]
debug075:4A88F9AE BL              j_j_memcpy_1
debug075:4A88F9B2 MOVS            R1, #0x52
debug075:4A88F9B4 LDR             R3, [SP,#4]
debug075:4A88F9B6 STR             R4, [SP,#0x14]
debug075:4A88F9B8 ADDS            R2, R3, R5
debug075:4A88F9BA STR             R2, [SP,#0xC]
debug075:4A88F9BC
debug075:4A88F9BC loc_4A88F9BC                            ; CODE XREF: debug075:4A88F9CAj
debug075:4A88F9BC LDR             R2, [SP,#0xC]
debug075:4A88F9BE CMP             R2, R3
debug075:4A88F9C0 BEQ             loc_4A88F9CC
debug075:4A88F9C2 LDRB            R2, [R3]
debug075:4A88F9C4 EORS            R2, R1
debug075:4A88F9C6 STRB            R2, [R3]
debug075:4A88F9C8 ADDS            R3, #1
debug075:4A88F9CA B               loc_4A88F9BC


// parse dex head
debug087:4A7AB18C
debug087:4A7AB18C ; =============== S U B R O U T I N E =======================================
debug087:4A7AB18C
debug087:4A7AB18C
debug087:4A7AB18C sub_4A7AB18C                            ; CODE XREF: debug087:4A771A78p
debug087:4A7AB18C
debug087:4A7AB18C var_2C= -0x2C
debug087:4A7AB18C
debug087:4A7AB18C PUSH            {R4-R7,LR}
debug087:4A7AB18E MOV             R7, R11
debug087:4A7AB190 MOV             R6, R10
debug087:4A7AB192 MOV             R5, R9
debug087:4A7AB194 MOV             R4, R8
debug087:4A7AB196 PUSH            {R4-R7}
debug087:4A7AB198 SUB             SP, SP, #0xC
debug087:4A7AB19A CMP             R0, #0
debug087:4A7AB19C BEQ             loc_4A7AB27C
debug087:4A7AB19E CMP             R1, #0
debug087:4A7AB1A0 BEQ             loc_4A7AB27C
debug087:4A7AB1A2 MOVS            R4, #3
debug087:4A7AB1A4 LSLS            R2, R2, #0x18
debug087:4A7AB1A6 NEGS            R3, R0
debug087:4A7AB1A8 LSRS            R2, R2, #0x18
debug087:4A7AB1AA ANDS            R3, R4
debug087:4A7AB1AC CMP             R3, R1
debug087:4A7AB1AE BHI             loc_4A7AB262
debug087:4A7AB1B0 CMP             R1, #4
debug087:4A7AB1B2 BHI             loc_4A7AB268
debug087:4A7AB1B4
debug087:4A7AB1B4 loc_4A7AB1B4                            ; CODE XREF: sub_4A7AB18C+DAj
debug087:4A7AB1B4 ADDS            R3, R1, #0
debug087:4A7AB1B6
debug087:4A7AB1B6 loc_4A7AB1B6                            ; CODE XREF: sub_4A7AB18C+E2j
debug087:4A7AB1B6 LDRB            R4, [R0]
debug087:4A7AB1B8 EORS            R4, R2
debug087:4A7AB1BA STRB            R4, [R0]
debug087:4A7AB1BC CMP             R3, #1
debug087:4A7AB1BE BEQ             loc_4A7AB274
debug087:4A7AB1C0 LDRB            R4, [R0,#1]
debug087:4A7AB1C2 EORS            R4, R2
debug087:4A7AB1C4 STRB            R4, [R0,#1]
debug087:4A7AB1C6 CMP             R3, #2
debug087:4A7AB1C8 BEQ             loc_4A7AB278
debug087:4A7AB1CA LDRB            R4, [R0,#2]
debug087:4A7AB1CC EORS            R4, R2
debug087:4A7AB1CE STRB            R4, [R0,#2]
debug087:4A7AB1D0 CMP             R3, #4
debug087:4A7AB1D2 BNE             loc_4A7AB270
debug087:4A7AB1D4 LDRB            R4, [R0,#3]
debug087:4A7AB1D6 EORS            R4, R2
debug087:4A7AB1D8 STRB            R4, [R0,#3]
debug087:4A7AB1DA MOVS            R4, #4
debug087:4A7AB1DC
debug087:4A7AB1DC loc_4A7AB1DC                            ; CODE XREF: sub_4A7AB18C+E6j
debug087:4A7AB1DC                                         ; sub_4A7AB18C+EAj ...
debug087:4A7AB1DC CMP             R1, R3
debug087:4A7AB1DE BEQ             loc_4A7AB252
debug087:4A7AB1E0
debug087:4A7AB1E0 loc_4A7AB1E0                            ; CODE XREF: sub_4A7AB18C+E0j
debug087:4A7AB1E0 SUBS            R5, R1, R3
debug087:4A7AB1E2 MOV             R12, R5
debug087:4A7AB1E4 SUBS            R5, #4
debug087:4A7AB1E6 LSRS            R5, R5, #2
debug087:4A7AB1E8 ADDS            R5, #1
debug087:4A7AB1EA STR             R5, [SP,#0x30+var_2C]
debug087:4A7AB1EC SUBS            R6, R1, #1
debug087:4A7AB1EE LSLS            R5, R5, #2
debug087:4A7AB1F0 MOV             R8, R5
debug087:4A7AB1F2 SUBS            R6, R6, R3
debug087:4A7AB1F4 CMP             R6, #2
debug087:4A7AB1F6 BLS             loc_4A7AB22E
debug087:4A7AB1F8 LSLS            R6, R2, #8
debug087:4A7AB1FA ORRS            R6, R2
debug087:4A7AB1FC MOV             R10, R6
debug087:4A7AB1FE MOV             R5, R10
debug087:4A7AB200 LSLS            R7, R2, #0x10
debug087:4A7AB202 ORRS            R7, R5
debug087:4A7AB204 MOVS            R5, #0
debug087:4A7AB206 LSLS            R6, R2, #0x18
debug087:4A7AB208 ORRS            R7, R6
debug087:4A7AB20A MOV             R10, R7
debug087:4A7AB20C MOVS            R6, #0
debug087:4A7AB20E MOV             R9, R5
debug087:4A7AB210 ADDS            R3, R0, R3
debug087:4A7AB212
debug087:4A7AB212 loc_4A7AB212                            ; CODE XREF: sub_4A7AB18C+9Aj
debug087:4A7AB212 MOV             R5, R10
debug087:4A7AB214 LDR             R7, [R3,R6]
debug087:4A7AB216 EORS            R7, R5
debug087:4A7AB218 MOVS            R5, #1
debug087:4A7AB21A MOV             R11, R5
debug087:4A7AB21C LDR             R5, [SP,#0x30+var_2C]
debug087:4A7AB21E ADD             R9, R11
debug087:4A7AB220 STR             R7, [R3,R6]
debug087:4A7AB222 ADDS            R6, #4
debug087:4A7AB224 CMP             R5, R9
debug087:4A7AB226 BHI             loc_4A7AB212
debug087:4A7AB228 ADD             R4, R8
debug087:4A7AB22A CMP             R12, R8
debug087:4A7AB22C BEQ             loc_4A7AB252
debug087:4A7AB22E
debug087:4A7AB22E loc_4A7AB22E                            ; CODE XREF: sub_4A7AB18C+6Aj
debug087:4A7AB22E ADDS            R5, R0, R4
debug087:4A7AB230 LDRB            R3, [R5]
debug087:4A7AB232 EORS            R3, R2
debug087:4A7AB234 STRB            R3, [R5]
debug087:4A7AB236 ADDS            R3, R4, #1
debug087:4A7AB238 CMP             R1, R3
debug087:4A7AB23A BLS             loc_4A7AB252
debug087:4A7AB23C ADDS            R3, R0, R3
debug087:4A7AB23E LDRB            R5, [R3]
debug087:4A7AB240 ADDS            R4, #2
debug087:4A7AB242 EORS            R5, R2
debug087:4A7AB244 STRB            R5, [R3]
debug087:4A7AB246 CMP             R1, R4
debug087:4A7AB248 BLS             loc_4A7AB252
debug087:4A7AB24A ADDS            R4, R0, R4
debug087:4A7AB24C LDRB            R3, [R4]
debug087:4A7AB24E EORS            R2, R3
debug087:4A7AB250 STRB            R2, [R4]
debug087:4A7AB252
debug087:4A7AB252 loc_4A7AB252                            ; CODE XREF: sub_4A7AB18C+52j
debug087:4A7AB252                                         ; sub_4A7AB18C+A0j ...
debug087:4A7AB252 MOVS            R0, #0
debug087:4A7AB254
debug087:4A7AB254 loc_4A7AB254                            ; CODE XREF: sub_4A7AB18C+F4j
debug087:4A7AB254 ADD             SP, SP, #0xC
debug087:4A7AB256 POP             {R2-R5}
debug087:4A7AB258 MOV             R8, R2
debug087:4A7AB25A MOV             R9, R3
debug087:4A7AB25C MOV             R10, R4
debug087:4A7AB25E MOV             R11, R5
debug087:4A7AB260 POP             {R4-R7,PC}
debug087:4A7AB262 ; ---------------------------------------------------------------------------
debug087:4A7AB262
debug087:4A7AB262 loc_4A7AB262                            ; CODE XREF: sub_4A7AB18C+22j
debug087:4A7AB262 SUBS            R3, R1, #0
debug087:4A7AB264 CMP             R3, #4
debug087:4A7AB266 BLS             loc_4A7AB1B4
debug087:4A7AB268
debug087:4A7AB268 loc_4A7AB268                            ; CODE XREF: sub_4A7AB18C+26j
debug087:4A7AB268 MOVS            R4, #0
debug087:4A7AB26A CMP             R3, #0
debug087:4A7AB26C BEQ             loc_4A7AB1E0
debug087:4A7AB26E B               loc_4A7AB1B6
debug087:4A7AB270 ; ---------------------------------------------------------------------------
debug087:4A7AB270
debug087:4A7AB270 loc_4A7AB270                            ; CODE XREF: sub_4A7AB18C+46j
debug087:4A7AB270 MOVS            R4, #3
debug087:4A7AB272 B               loc_4A7AB1DC
debug087:4A7AB274 ; ---------------------------------------------------------------------------
debug087:4A7AB274
debug087:4A7AB274 loc_4A7AB274                            ; CODE XREF: sub_4A7AB18C+32j
debug087:4A7AB274 MOVS            R4, #1
debug087:4A7AB276 B               loc_4A7AB1DC
debug087:4A7AB278 ; ---------------------------------------------------------------------------
debug087:4A7AB278
debug087:4A7AB278 loc_4A7AB278                            ; CODE XREF: sub_4A7AB18C+3Cj
debug087:4A7AB278 MOVS            R4, #2
debug087:4A7AB27A B               loc_4A7AB1DC
debug087:4A7AB27C ; ---------------------------------------------------------------------------
debug087:4A7AB27C
debug087:4A7AB27C loc_4A7AB27C                            ; CODE XREF: sub_4A7AB18C+10j
debug087:4A7AB27C                                         ; sub_4A7AB18C+14j
debug087:4A7AB27C MOVS            R0, #1
debug087:4A7AB27E NEGS            R0, R0
debug087:4A7AB280 B               loc_4A7AB254
debug087:4A7AB280 ; End of function sub_4A7AB18C
debug087:4A7AB280
debug087:4A7AB280 ; ---------------------------------------------------------------------------

signed int __fastcall sub_4A7AB18C(int a1, unsigned int a2, int a3)
{
  unsigned int v3; // r3@3
  signed int v4; // r4@9
  int v5; // r12@11
  int v6; // r8@11
  int v7; // r6@12
  unsigned int v8; // r9@12
  int v9; // r3@12
  int v10; // r3@15
  unsigned int v11; // r4@16
  unsigned int v13; // [sp+4h] [bp-2Ch]@11

  if ( a1 && a2 )
  {
    a3 = (unsigned __int8)a3;
    v3 = -a1 & 3;
    if ( v3 > a2 )
    {
      v3 = a2;
      if ( a2 <= 4 )
        goto LABEL_5;
    }
    else if ( a2 <= 4 )
    {
LABEL_5:
      v3 = a2;
LABEL_6:
      *(_BYTE *)a1 ^= a3;
      if ( v3 == 1 )
      {
        v4 = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 1) ^= a3;
        if ( v3 == 2 )
        {
          v4 = 2;
        }
        else
        {
          *(_BYTE *)(a1 + 2) ^= a3;
          if ( v3 == 4 )
          {
            *(_BYTE *)(a1 + 3) ^= a3;
            v4 = 4;
          }
          else
          {
            v4 = 3;
          }
        }
      }
      if ( a2 == v3 )
        return 0;
LABEL_11:
      v5 = a2 - v3;
      v13 = ((a2 - v3 - 4) >> 2) + 1;
      v6 = 4 * v13;
      if ( a2 - 1 - v3 <= 2 )
        goto LABEL_29;
      v7 = 0;
      v8 = 0;
      v9 = a1 + v3;
      do
      {
        ++v8;
        *(_DWORD *)(v9 + v7) ^= (a3 << 16) | (a3 << 8) | a3 | (a3 << 24);
        v7 += 4;
      }
      while ( v13 > v8 );
      v4 += v6;
      if ( v5 != v6 )
      {
LABEL_29:
        *(_BYTE *)(a1 + v4) ^= a3;
        v10 = v4 + 1;
        if ( a2 > v4 + 1 )
        {
          v11 = v4 + 2;
          *(_BYTE *)(a1 + v10) ^= a3;
          if ( a2 > v11 )
            *(_BYTE *)(a1 + v11) ^= a3;
        }
      }
      return 0;
    }
    v4 = 0;
    if ( !v3 )
      goto LABEL_11;
    goto LABEL_6;
  }
  return -1;
}

+8= qh.size  qh.start-dex.end=qh.size



7f45 4c46 0101 0100 0000 0000 0000 0000
0300 
2800 
0100 0000 
0000 0000 
3400 0000
bc69 0700   0769bc
0000 0005 
3400 
2000 
0800 
2800
1d00 
1c00 




#define EI_NIDENT       16  
typedef struct elf32_hdr{  
  unsigned char e_ident[EI_NIDENT];   
  Elf32_Half    e_type;     /* file type */  
  Elf32_Half    e_machine;  /* architecture */  
  Elf32_Word 	e_version;  
  Elf32_Addr    e_entry;    /* entry point */  
  Elf32_Off 	e_phoff;        /* PH table offset */  
  Elf32_Off 	e_shoff;        /* SH table offset */  
  Elf32_Word    e_flags;  
  Elf32_Half    e_ehsize;       /* ELF header size in bytes */  
  Elf32_Half    e_phentsize;    /* PH size */  
  Elf32_Half    e_phnum;        /* PH number */  
  Elf32_Half    e_shentsize;    /* SH size */  
  Elf32_Half    e_shnum;        /* SH number */  
  Elf32_Half    e_shstrndx; /* SH name string table index */  
} Elf32_Ehdr;  


typedef struct {  
  Elf32_Word    sh_name;    /* name of section, index */  
  Elf32_Word    sh_type;      
  Elf32_Word    sh_flags;  
  Elf32_Addr     sh_addr;       /* memory address, if any */  
  Elf32_Off      sh_offset;  
  Elf32_Word    sh_size;        /* section size in file */  
  Elf32_Word    sh_link;  
  Elf32_Word    sh_info;  
  Elf32_Word    sh_addralign;  
  Elf32_Word    sh_entsize;     /* fixed entry size, if have */  
} Elf32_Shdr; 

4A5B34CC + 398 =  4A5B3864
4A5B34CC + 28 * 17 = 4A5B3864

auto i,fp;
fp = fopen("e:\\sections.txt", "wb");
for(i=0x4A5B34CC;i<0x4A5B3864;i++)
  fputc(Byte(i), fp);

auto i,b;
for(i=0x4A5A1434+0x6b;i<0x4A5A1434+0x1259;i++)
{
    b = Byte(i);
    if (b == 0)
        break;  
    print(b);
}

00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00  0B 00 00 00 0B 00 00 00
02 00 00 00 14 01 00 00  14 01 00 00 20 13 00 00
02 00 00 00 01 00 00 00  04 00 00 00 10 00 00 00

13 00 00 00 03 00 00 00  02 00 00 00 34 14 00 00    4A5A1434
34 14 00 00 59 12 00 00  00 00 00 00 00 00 00 00
01 00 00 00 00 00 00 00  1B 00 00 00 05 00 00 00
02 00 00 00 90 26 00 00  90 26 00 00 EC 08 00 00
01 00 00 00 00 00 00 00  04 00 00 00 04 00 00 00

21 00 00 00 09 00 00 00  02 00 00 00 7C 2F 00 00
7C 2F 00 00 20 07 00 00  01 00 00 00 00 00 00 00
04 00 00 00 08 00 00 00  2A 00 00 00 09 00 00 00
02 00 00 00 9C 36 00 00  9C 36 00 00 20 00 00 00
01 00 00 00 06 00 00 00  04 00 00 00 08 00 00 00

typedef struct elf32_phdr{  
  Elf32_Word    p_type;   
  Elf32_Off     p_offset;  
  Elf32_Addr    p_vaddr;        /* virtual address */  
  Elf32_Addr    p_paddr;        /* ignore */  
  Elf32_Word    p_filesz;       /* segment size in file */  
  Elf32_Word    p_memsz;        /* size in memory */  
  Elf32_Word    p_flags;  
  Elf32_Word    p_align;       
} Elf32_Phdr;  

34
134

0600 0000 3400 0000 3400 0000 3400 0000 
0001 0000 0001 0000 0400 0000 0400 0000 

0300 0000 3401 0000 3401 0000 3401 0000 
1300 0000 1300 0000 0400 0000 0100 0000 

0100 0000 0000 0000 0000 0000 0000 0000 
74f4 0200 74f4 0200 0500 0000 0010 0000 

0100 0000 48fe 0200 480e 0300 480e 0300 
146a 0400 fcd8 0600 0600 0000
0010 0000 0200 0000 080c 0300 081c 0300
081c 0300 0801 0000 0801 0000 0600 0000
0400 0000 51e5 7464 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0600 0000
0000 0000 0100 0070 44ad 0200 44ad 0200
44ad 0200 7019 0000 7019 0000 0400 0000
0400 0000 52e5 7464 48fe 0200 480e 0300
480e 0300 b811 0000 b811 0000 0600 0000
0800 0000 2f73 7973 7465 6d2f 6269 6e2f
6c69 6e6b 6572 0000 0000 0000 0000 0000
0000 0000 0000 0000 0100 0000 0000 0000
0000 0000 1200 0000 1000 0000 0000 0000
0000 0000 1200 0000 1d00 0000 0000 0000
0000 0000 1200 0000 2400 0000 0479 0200


typedef struct elf32_sym{  
  Elf32_Word    st_name;  
  Elf32_Addr    st_value;  
  Elf32_Word    st_size;  
  unsigned char     st_info;  
  unsigned char   st_other;  
  Elf32_Half     st_shndx;  
} Elf32_Sym; 